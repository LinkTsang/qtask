# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import qtaskd_pb2 as qtaskd__pb2


class QTaskDaemonStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Echo = channel.unary_unary(
            '/qtaskd.QTaskDaemon/Echo',
            request_serializer=qtaskd__pb2.Request.SerializeToString,
            response_deserializer=qtaskd__pb2.Reply.FromString,
        )
        self.RunTask = channel.unary_unary(
            '/qtaskd.QTaskDaemon/RunTask',
            request_serializer=qtaskd__pb2.RunTaskRequest.SerializeToString,
            response_deserializer=qtaskd__pb2.Reply.FromString,
        )
        self.GetTask = channel.unary_unary(
            '/qtaskd.QTaskDaemon/GetTask',
            request_serializer=qtaskd__pb2.GetTaskRequest.SerializeToString,
            response_deserializer=qtaskd__pb2.GetTaskReply.FromString,
        )


class QTaskDaemonServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Echo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QTaskDaemonServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Echo': grpc.unary_unary_rpc_method_handler(
            servicer.Echo,
            request_deserializer=qtaskd__pb2.Request.FromString,
            response_serializer=qtaskd__pb2.Reply.SerializeToString,
        ),
        'RunTask': grpc.unary_unary_rpc_method_handler(
            servicer.RunTask,
            request_deserializer=qtaskd__pb2.RunTaskRequest.FromString,
            response_serializer=qtaskd__pb2.Reply.SerializeToString,
        ),
        'GetTask': grpc.unary_unary_rpc_method_handler(
            servicer.GetTask,
            request_deserializer=qtaskd__pb2.GetTaskRequest.FromString,
            response_serializer=qtaskd__pb2.GetTaskReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'qtaskd.QTaskDaemon', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class QTaskDaemon(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Echo(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qtaskd.QTaskDaemon/Echo',
                                             qtaskd__pb2.Request.SerializeToString,
                                             qtaskd__pb2.Reply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunTask(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qtaskd.QTaskDaemon/RunTask',
                                             qtaskd__pb2.RunTaskRequest.SerializeToString,
                                             qtaskd__pb2.Reply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTask(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/qtaskd.QTaskDaemon/GetTask',
                                             qtaskd__pb2.GetTaskRequest.SerializeToString,
                                             qtaskd__pb2.GetTaskReply.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
